<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>六记の随笔</title><link>https://ACG-Q.github.io/new_blog</link><description>哟吼！！！</description><copyright>六记の随笔</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://ACG-Q.github.io/new_blog</link></image><lastBuildDate>Tue, 13 Aug 2024 01:29:27 +0000</lastBuildDate><managingEditor>六记の随笔</managingEditor><ttl>60</ttl><webMaster>六记の随笔</webMaster><item><title> [油猴] 文件蜈蚣 - 显示今日激活码</title><link>https://ACG-Q.github.io/new_blog/post/14.html</link><description>![image](https://github.com/user-attachments/assets/0a514916-6890-4448-b51f-a9da4256e109)&#13;
&lt;details&gt;&#13;
&lt;summary&gt;油猴脚本&lt;/summary&gt;&#13;
&#13;
```javascript&#13;
// ==UserScript==&#13;
// @name         显示今日激活码&#13;
// @namespace    Violentmonkey Scripts&#13;
// @match        *://filecxx.com/zh_CN/activation_code.html*&#13;
// @grant        none&#13;
// @version      1.1&#13;
// @author       六记&#13;
// @description  显示今日有效的激活码，并提供复制功能&#13;
// @icon         https://filecxx.com/favicon.ico&#13;
// @require      https://code.jquery.com/jquery-3.7.1.min.js&#13;
// ==/UserScript==&#13;
&#13;
(function ($) {&#13;
    // 函数：复制文本到剪贴板&#13;
    function copyToClipboard(text) {&#13;
        if (navigator.clipboard &amp;&amp; window.isSecureContext) {&#13;
            return navigator.clipboard.writeText(text).then(function () {&#13;
                console.log('复制成功');&#13;
            }).catch(function (err) {&#13;
                console.error('复制失败：', err);&#13;
                return Promise.reject(err);&#13;
            });&#13;
        } else {&#13;
            return new Promise((resolve, reject) =&gt; {&#13;
                // 回退到使用 document.execCommand&#13;
                const textarea = document.createElement('textarea');&#13;
                textarea.value = text;&#13;
                document.body.appendChild(textarea);&#13;
                textarea.select();&#13;
                const success = document.execCommand('copy');&#13;
                document.body.removeChild(textarea);&#13;
                success ? resolve() : reject('复制失败');&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    // 函数：显示自定义提示框&#13;
    function showCustomAlert(message, success = true) {&#13;
        const alertBox = $('&lt;div&gt;').css({&#13;
            position: 'fixed',&#13;
            top: '20px',&#13;
            right: '20px',&#13;
            padding: '10px 20px',&#13;
            background: success ? '#44c767' : '#e74c3c',&#13;
            color: '#fff',&#13;
            'border-radius': '5px',&#13;
            'box-shadow': '0px 0px 10px rgba(0, 0, 0, 0.1)',&#13;
            'z-index': '1000'&#13;
        }).text(message);&#13;
&#13;
        $('body').append(alertBox);&#13;
&#13;
        setTimeout(function () {&#13;
            alertBox.fadeOut(function () {&#13;
                $(this).remove();&#13;
            });&#13;
        }, 3000);&#13;
    }&#13;
&#13;
    $(document).ready(function () {&#13;
        // 使用 jQuery 选择元素&#13;
        var codeTimes = $('#code_list &gt; div.code_time');&#13;
        var codeTexts = $('#code_list &gt; div.code_text');&#13;
&#13;
        // 遍历激活码日期&#13;
        codeTimes.each(function (i) {&#13;
            var startTime = $(this).text().split(' - ')[0];&#13;
            var endTime = $(this).text().split(' - ')[1];&#13;
            var startf = new Date(startTime) &lt;= new Date();&#13;
            var endf = new Date(endTime) &gt;= new Date();&#13;
&#13;
            if (!startf || !endf) {&#13;
                // 隐藏不在今日日期范围内的激活码&#13;
                $(this).hide();&#13;
                $(this).next('.code_text').hide();&#13;
                return;&#13;
            }&#13;
&#13;
            // 创建复制按钮并绑定点击事件&#13;
            var copyButton = $('&lt;button&gt;复制&lt;/button&gt;').css({&#13;
                padding: '5px 10px',&#13;
                'font-size': '14px',&#13;
                color: '#fff',&#13;
                background: '#007bff',&#13;
                border: 'none',&#13;
                'border-radius': '5px',&#13;
                cursor: 'pointer',&#13;
                'margin-left': '10px',&#13;
                'transition': 'background 0.3s'&#13;
            }).hover(&#13;
                function () {&#13;
                    $(this).css('background', '#0056b3');&#13;
                },&#13;
                function () {&#13;
                    $(this).css('background', '#007bff');&#13;
                }&#13;
            ).click(function () {&#13;
                const button = $(this);&#13;
                button.prop('disabled', true).text('复制中...');&#13;
&#13;
                // 复制文本到剪贴板&#13;
                copyToClipboard(codeTexts.eq(i).text())&#13;
                    .then(() =&gt; {&#13;
                        showCustomAlert('激活码已复制到剪贴板！');&#13;
                    })&#13;
                    .catch(() =&gt; {&#13;
                        showCustomAlert('复制失败，请重试！', false);&#13;
                    })&#13;
                    .finally(() =&gt; {&#13;
                        button.prop('disabled', false).text('复制');&#13;
                    });&#13;
            });&#13;
&#13;
            // 将复制按钮添加到页面上&#13;
            $(this).append(copyButton);&#13;
        });&#13;
    });&#13;
})(jQuery);&#13;
```&#13;
&lt;/details&gt;。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/14.html</guid><pubDate>Tue, 13 Aug 2024 01:29:05 +0000</pubDate></item><item><title>树莓派5开启VNC</title><link>https://ACG-Q.github.io/new_blog/post/13.html</link><description># 开启VNC&#13;
&#13;
## 1. 打开树莓派配置&#13;
&#13;
```shell&#13;
sudo raspi-config&#13;
```&#13;
&#13;
![树莓派配置](https://github.com/user-attachments/assets/ec7cc746-0f42-4113-a34c-12a79d74dabe)&#13;
&#13;
## 2. 选择 `3 Interface Options` 并按下回车&#13;
&#13;
![选择 Interface Options](https://github.com/user-attachments/assets/9863a1b4-66df-4254-8e28-f02f9c85dd29)&#13;
&#13;
## 3. 选择 `I3 VNC` 并按下回车&#13;
&#13;
![选择 VNC](https://github.com/user-attachments/assets/86e38a57-8592-4af3-940f-881ee46a3309)&#13;
&#13;
## 4. 选择 `Yes` 并按两次回车&#13;
&#13;
![确认 Yes](https://github.com/user-attachments/assets/0ff365eb-aa19-44b1-89bc-911e4274e044)&#13;
![确认 Yes](https://github.com/user-attachments/assets/63c6adff-f007-4e06-a7dd-a63715355c9f)&#13;
![确认 Yes](https://github.com/user-attachments/assets/ca6ae887-f2ce-4e2c-ace6-b0e93e1d0428)&#13;
&#13;
## 5. 选择 `Finish` 并按下回车&#13;
&#13;
![选择 Finish](https://github.com/user-attachments/assets/dccd4ae5-24be-4575-b141-9697ed5e9969)&#13;
&#13;
## 6. 完成&#13;
&#13;
&gt; 正常情况下，菜单栏右边会出现 VNC 图标&#13;
&#13;
![VNC 图标](https://github.com/user-attachments/assets/c09b5460-3a75-4d27-a7be-c9933a6c36b8)&#13;
&#13;
---&#13;
&#13;
# 允许NoVNC进行连接/修改VNC验证协议&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 切换 `Authentication` 为 `VNC Password`&#13;
&#13;
![image](https://github.com/user-attachments/assets/f2b5765d-1acd-46df-8943-27cd988443b2)&#13;
&#13;
# 遇到的问题&#13;
&#13;
## 1. No configured security type is supported by 3.3 VNC Viewer&#13;
&#13;
![错误信息](https://github.com/user-attachments/assets/f7c71009-e46c-4ab8-8837-783e1ccc6dd9)&#13;
![错误信息](https://github.com/user-attachments/assets/9ca920b5-9da7-4a71-84b5-665d1213751e)&#13;
&#13;
&gt; 由于新版树莓派镜像更换了 **RealVNC**，导致非 **RealVNC** 查看器无法正常连接树莓派。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/13.html</guid><pubDate>Thu, 08 Aug 2024 07:29:26 +0000</pubDate></item><item><title>[C#] 极简·单行阅读器</title><link>https://ACG-Q.github.io/new_blog/post/12.html</link><description>&gt; [!NOTE]&#13;
&gt; 软件名称: 极简·单行阅读器&#13;
&gt; 软件官网: [Read133](http://read.home133.com/)&#13;
&#13;
# 离线版&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 强制开启离线版&#13;
&#13;
1. 搜索'登录'&#13;
![image](https://github.com/user-attachments/assets/a45a423d-895e-48ed-b98d-605f469f0054)&#13;
2. 找到方法'BindLoginResult'&#13;
```C#&#13;
private void BindLoginResult(LoginResult result)&#13;
{&#13;
	if (result.LoginStatus == LoginStatus.UnLogin)&#13;
	{&#13;
		this.lblInfo.Text = '欢迎使用极简单行阅读器，请点击右键菜单注册或登录';&#13;
		...&#13;
	}&#13;
	this.lblInfo.Text = '欢迎使用极简单行阅读器，请点击右键菜单打开文本或者网页';&#13;
	...&#13;
	if (result.LoginStatus == LoginStatus.Login)&#13;
	{&#13;
		...&#13;
	}&#13;
	if (result.LoginStatus == LoginStatus.Offline || result.LoginStatus == LoginStatus.Error)&#13;
	{&#13;
		this.lblInfo.Text = '欢迎使用极简单行阅读器[离线]，请点击右键菜单打开文本';&#13;
		...&#13;
	}&#13;
	...&#13;
}&#13;
```&#13;
&gt; 由此可见，通过'result.LoginStatus'来识别当前登录状态&#13;
4. 修改 `result.LoginStatus` 为 `LoginStatus.Offline`&#13;
5. 完成修改&#13;
&#13;
![image](https://github.com/user-attachments/assets/94489e21-a94e-49c1-bffe-fd6dfa32e332)&#13;
&#13;
&gt; 缺少在线功能&#13;
&#13;
# 在线版&#13;
&#13;
## 模拟登录&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 目的: 绕过手动登录，模拟用户已经登陆过了，即触发`AutoLogin`方法&#13;
&#13;
### `AutoLogin`方法&#13;
&#13;
```c#&#13;
public static void AutoLogin()&#13;
{&#13;
    if (string.IsNullOrEmpty(Bis.UID))&#13;
    {&#13;
        ...&#13;
    }&#13;
    try&#13;
    {&#13;
        ApiResult apiResult2 = Util.GetApiResult(Constants.API_AutoLogin, 10);&#13;
        if (apiResult2.Status == 200)&#13;
        {&#13;
            Bis.LoRes.LoginStatus = LoginStatus.Login;&#13;
            Bis.LoRes.UpdateDataFromJson(apiResult2.Data);&#13;
            ...&#13;
        }&#13;
        ...&#13;
    }&#13;
    catch (Exception ex2)&#13;
    {&#13;
       ...&#13;
    }&#13;
}&#13;
```&#13;
&#13;
### 1. 修改`UID`&#13;
&#13;
&gt; 这样才能开启'打开网页-热门站点'\“系统-会员”等多个页面&#13;
&#13;
1. 找到获取UID的方法&#13;
![image](https://github.com/user-attachments/assets/859c8666-f2a9-4af6-950a-de406c7560f5)&#13;
4. 反编译方法 &amp; 修改代码 &amp; 编译&#13;
![image](https://github.com/user-attachments/assets/8970e133-fdf5-4a9a-b03a-b206bfcac67c)&#13;
![image](https://github.com/user-attachments/assets/4adf2493-dbf6-4af2-ab7d-c5b0914c0b90)&#13;
```diff&#13;
    public static string UID&#13;
    {&#13;
        get&#13;
        {&#13;
-           if (Bis.uid == null)&#13;
-           {&#13;
-               Bis.uid = DataProcess.GetKey('Sys', 'UID');&#13;
-           }&#13;
-           return Bis.uid;&#13;
+          return '52钓鱼崽';&#13;
        }&#13;
        set&#13;
        {&#13;
        }&#13;
    }&#13;
```&#13;
### 2. 创建虚假登录res&#13;
&#13;
1. 创建虚拟登录状态&#13;
设置 `apiResult2.Status` 为 200&#13;
2. 修改`apiResult2.Data`, 即修改登录结果&#13;
&gt; 不过修改`apiResult2.Data`过于麻烦，所以还是直接修改`UpdateDataFromJson`函数&#13;
&#13;
```c#&#13;
public void UpdateDataFromJson(JToken data)&#13;
{&#13;
	this.UserName = data['user_name'].ToString();&#13;
	...&#13;
}&#13;
```&#13;
&gt; 都是通过传入的内容解析获取的&#13;
&gt; 构建一个虚假登录内容用于解析&#13;
&#13;
```c#&#13;
JObject jsonObject = new JObject&#13;
{&#13;
    ['user_name'] = '52钓鱼崽',&#13;
    ['user_create_time'] = DateTime.Now.ToString(),&#13;
    ['phone'] = '1234567890',&#13;
    ['nick_name'] = '52钓鱼崽',&#13;
    ['nick_flag'] = 0,&#13;
    ['sex'] = 0,&#13;
    ['head_img'] = 'http://read.home133.com/img/icon/picture.svg',&#13;
    ['status'] = 1,&#13;
    ['active_id'] = 'A123',&#13;
    ['last_version'] = '123',&#13;
    ['update_version'] = '456',&#13;
    ['expire_date'] = DateTime.Now.AddDays(30.0).ToString(),&#13;
    ['qq_group'] = '123456',&#13;
    ['channel'] = 'Web',&#13;
    ['chapter_ai_url'] = 'https://acg-q.github.io/new_blog/post/12.html',&#13;
    ['member_share_cnt'] = 5,&#13;
    ['point_day'] = 50,&#13;
    // 更多 选项&#13;
    ['append'] = new JArray&#13;
    {&#13;
        new JObject&#13;
        {&#13;
            ['url'] = '',&#13;
            ['title'] = '52钓鱼崽 破解'&#13;
        }&#13;
    },&#13;
    // 这里应该是插件&#13;
    ['site'] = new JArray&#13;
    {&#13;
        new JObject&#13;
        {&#13;
            ['url'] = '',&#13;
            ['title'] = '',&#13;
            ['plug_uid'] = ''&#13;
        }&#13;
    },&#13;
    ['site'] = new JArray&#13;
    {&#13;
        new JObject&#13;
        {&#13;
            ['url'] = '',&#13;
            ['title'] = '',&#13;
            ['plug_uid'] = ''&#13;
        }&#13;
    },&#13;
    // 购买了哪些APP&#13;
    // 这里的参数都是 和 应用中心 的应用信息一一对应&#13;
    ['app'] = new JArray&#13;
    {&#13;
        new JObject&#13;
        {&#13;
            ['id'] = '',&#13;
            ['name'] = '',&#13;
            ['status'] = '1', // 这里必须存在且是数字&#13;
            ['enabled'] = '1', // 这里必须存在且是数字&#13;
            ['type'] = '1', // 这里必须存在且是数字&#13;
            ['path'] = '',&#13;
            ['imgUrl'] = '',&#13;
            ['remark'] = '',&#13;
            ['helpUrl'] = '',&#13;
            ['downloadUrl'] = '',&#13;
            ['updateUrl'] = '',&#13;
            ['className'] = '',&#13;
            ['version'] = '',&#13;
            ['price'] = '999', // 这里必须存在且是数字&#13;
            ['freeDay'] = '1', // 这里必须存在且是数字&#13;
            ['size'] = ''&#13;
        }&#13;
    },&#13;
    // 公告&#13;
    // url 存在，软件运行，打开网页&#13;
    // msg 存在，软件运行，打开弹窗&#13;
    // close 等于 true，软件运行后自动关闭&#13;
    // cap 不清楚，忘了&#13;
    ['msg'] = new JObject&#13;
    {&#13;
        ['msg'] = '',&#13;
        ['cap'] = '',&#13;
        ['url'] = '',&#13;
        ['close'] = false&#13;
    }&#13;
};&#13;
&#13;
data = jsonObject;&#13;
```&#13;
3. 保持软件更新(不过这里没有测试过...)&#13;
&gt; 把`AutoLogin`函数里的`ApiResult apiResult = Util.GetApiResult(Constants.API_PreRegInfo, 10);`复制一份&#13;
&gt; 将获取到的内容通过Data传递下去&#13;
```diff&#13;
  ApiResult apiResult2 = Util.GetApiResult(Constants.API_AutoLogin, 10);&#13;
+ ApiResult apiResult = Util.GetApiResult(Constants.API_PreRegInfo, 10);&#13;
+ apiResult2.Data = apiResult.Data;&#13;
+ apiResult2.Status = 200;&#13;
  if (apiResult2.Status == 200)&#13;
```&#13;
&gt; 在`UpdateDataFromJson`里面提取出`last_version`和`update_version`&#13;
&#13;
```c#&#13;
string text = data['last_version'].ToString();&#13;
string text2 = data['update_version'].ToString();&#13;
```&#13;
&#13;
```diff&#13;
- ['last_version'] = '123',&#13;
- ['update_version'] = '456',&#13;
+ ['last_version'] = text,&#13;
+ ['update_version']  = text2,&#13;
```&#13;
&#13;
&lt;details&gt;&#13;
&lt;summary&gt;完整的代码&lt;/summary&gt;&#13;
&#13;
```c#&#13;
string text = data['last_version'].ToString();&#13;
string text2 = data['update_version'].ToString();&#13;
&#13;
JObject jsonObject = new JObject&#13;
{&#13;
    ['user_name'] = '52钓鱼崽',&#13;
    ['user_create_time'] = DateTime.Now.ToString(),&#13;
    ['phone'] = '1234567890',&#13;
    ['nick_name'] = '52钓鱼崽',&#13;
    ['nick_flag'] = 0,&#13;
    ['sex'] = 0,&#13;
    ['head_img'] = 'http://read.home133.com/img/icon/picture.svg',&#13;
    ['status'] = 1,&#13;
    ['active_id'] = 'A123',&#13;
    ['last_version'] = text,&#13;
    ['update_version']  = text2,&#13;
    ['expire_date'] = DateTime.Now.AddDays(30.0).ToString(),&#13;
    ['qq_group'] = '123456',&#13;
    ['channel'] = 'Web',&#13;
    ['chapter_ai_url'] = 'https://acg-q.github.io/new_blog/post/12.html',&#13;
    ['member_share_cnt'] = 5,&#13;
    ['point_day'] = 50,&#13;
    // 更多 选项&#13;
    ['append'] = new JArray&#13;
    {&#13;
        new JObject&#13;
        {&#13;
            ['url'] = 'https://acg-q.github.io/new_blog/post/12.html',&#13;
            ['title'] = '52钓鱼崽 破解'&#13;
        }&#13;
    },&#13;
    // 这里应该是插件&#13;
    ['site'] = new JArray&#13;
    {&#13;
        new JObject&#13;
        {&#13;
            ['url'] = '',&#13;
            ['title'] = '',&#13;
            ['plug_uid'] = ''&#13;
        }&#13;
    },&#13;
    // 购买了哪些APP&#13;
    // 这里的参数都是 和 应用中心 的应用信息一一对应&#13;
    ['app'] = new JArray&#13;
    {&#13;
        new JObject&#13;
        {&#13;
            ['id'] = '',&#13;
            ['name'] = '',&#13;
            ['status'] = '1', // 这里必须存在且是数字&#13;
            ['enabled'] = '1', // 这里必须存在且是数字&#13;
            ['type'] = '1', // 这里必须存在且是数字&#13;
            ['path'] = '',&#13;
            ['imgUrl'] = '',&#13;
            ['remark'] = '',&#13;
            ['helpUrl'] = '',&#13;
            ['downloadUrl'] = '',&#13;
            ['updateUrl'] = '',&#13;
            ['className'] = '',&#13;
            ['version'] = '',&#13;
            ['price'] = '999', // 这里必须存在且是数字&#13;
            ['freeDay'] = '1', // 这里必须存在且是数字&#13;
            ['size'] = ''&#13;
        }&#13;
    },&#13;
    // 公告&#13;
    // url 存在，软件运行，打开网页&#13;
    // msg 存在，软件运行，打开弹窗&#13;
    // close 等于 true，软件运行后自动关闭&#13;
    // cap 不清楚，忘了&#13;
    ['msg'] = new JObject&#13;
    {&#13;
        ['msg'] = '',&#13;
        ['cap'] = '',&#13;
        ['url'] = '',&#13;
        ['close'] = false&#13;
    }&#13;
};&#13;
&#13;
data = jsonObject;&#13;
```&#13;
&lt;/details&gt;&#13;
&#13;
### 3. 应用免费下载&#13;
&#13;
1. 找到`DownloadApp`这个函数&#13;
```diff&#13;
private void DownloadApp(params object[] objs)&#13;
{&#13;
	try&#13;
	{&#13;
		if (objs.Length != 0)&#13;
		{&#13;
			ReApp rApp = objs[0] as ReApp;&#13;
			if (rApp != null)&#13;
			{&#13;
				if (rApp.Status == 0)&#13;
				{&#13;
					ApiResult apiResult = Util.GetApiResult(Constants.API_GetApp + '?id=' + rApp.ID, 3);&#13;
+					apiResult.Status = 200;&#13;
					if (apiResult.Status != 200)&#13;
					{&#13;
						this.loadingW.ShowMsg(apiResult.Msg, 2);&#13;
						return;&#13;
					}&#13;
					rApp.Status = 1;&#13;
				}&#13;
				rApp.Status = 1;&#13;
				this.cApp = rApp;&#13;
				ProgressBar pb = this.barDics[rApp.ID];&#13;
				Grid grid = this.gridDics[rApp.ID];&#13;
				Button btn = this.btnDics[rApp.ID];&#13;
				string appPath = Util.GetAppPath('/app');&#13;
				if (!Directory.Exists(appPath))&#13;
				{&#13;
					Directory.CreateDirectory(appPath);&#13;
				}&#13;
				string text = appPath + '/' + rApp.Path + '.zip';&#13;
				base.Dispatcher.Invoke(delegate&#13;
				{&#13;
					btn.Content = '下载中';&#13;
					pb.Visibility = Visibility.Visible;&#13;
				});&#13;
				Util.DownLoadFile(text, rApp.DownloadUrl, new TimerDispatcherDelegate(this.SetProgressMax), new TimerDispatcherDelegate(this.SetProgress));&#13;
				if (File.Exists(text))&#13;
				{&#13;
					base.Dispatcher.Invoke(delegate&#13;
					{&#13;
						btn.Content = '安装中';&#13;
						pb.Visibility = Visibility.Visible;&#13;
					});&#13;
					ZipHelper.UnZipFile(text, appPath);&#13;
					if (rApp.IsSetup)&#13;
					{&#13;
						this.IsChange = true;&#13;
						this.btnActions[rApp.ID] = AppAction.Start;&#13;
						if (rApp.LocalInfo == null)&#13;
						{&#13;
							AppInfo appInfo = new AppInfo(rApp);&#13;
							appInfo.IsEnabled = true;&#13;
							DataProcess.InsertApp(appInfo);&#13;
							rApp.LocalInfo = appInfo;&#13;
						}&#13;
						base.Dispatcher.Invoke(delegate&#13;
						{&#13;
							pb.Visibility = Visibility.Collapsed;&#13;
							this.SetActionStyle(rApp);&#13;
						});&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
	}&#13;
	catch (Exception ex)&#13;
	{&#13;
		Util.AddLog('DownloadApp Error:' + ex.Message);&#13;
		throw ex;&#13;
	}&#13;
}&#13;
```&#13;
&#13;
2. 允许打开应用&#13;
&gt; 找到`AppController`类&#13;
&gt; 找到`AppController`下的`CheckAppEnable`方法&#13;
&#13;
```diff&#13;
public ApiResult CheckAppEnable()&#13;
{&#13;
-    return Util.GetApiResult(string.Concat(new string[]&#13;
+    ApiResult apiResult = Util.GetApiResult(string.Concat(new string[]&#13;
    {&#13;
        Constants.API_CheckAppEnabled,&#13;
        '?appId=',&#13;
        this.app.AppID,&#13;
        '&amp;appVer=',&#13;
        this.app.Version&#13;
     )), 3);&#13;
+    apiResult.Status = 200;&#13;
+    return apiResult;&#13;
}&#13;
```&#13;
&#13;
### 4. 修改会员信息&#13;
&#13;
1.  找到`RegResult`类&#13;
&#13;
![image](https://github.com/user-attachments/assets/e5b96599-7ffb-49ff-88bc-9b7c6f441ae3)&#13;
&#13;
2. 修改`UpdateDataFromJson`方法&#13;
&#13;
```diff&#13;
  public void UpdateDataFromJson(JToken data)&#13;
  {&#13;
	// 剩余可用积分&#13;
- 	this.SharePoint = (int)data['share'];&#13;
+   this.SharePoint = 9999;&#13;
	this.ExpireDate = data['expire_date'].ToString();&#13;
	// 积分总数&#13;
- 	this.TotalSharePoint = (int)data['total_share'];&#13;
+   this.TotalSharePoint = 9999;&#13;
	// 分享数量&#13;
- 	this.ShareUserCnt = (int)data['share_ucnt'];&#13;
+   this.ShareUserCnt = 456;&#13;
	// 不清楚&#13;
- 	this.PayPoint = ((data['pay_point'] == null) ? 5 : ((int)data['pay_point']));&#13;
+   this.PayPoint = 999;&#13;
	// 用户状态&#13;
- 	this.Status = (UserStatus)(int)data['status'];&#13;
+	this.Status = UserStatus.Member;&#13;
  }&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/d37554a2-e0d7-4273-bf99-7f56ba65872e)&#13;
&#13;
&#13;
### 5. 插件免费下载(目前无法破解)&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 主要关键还是在`DownPlug`方法中&#13;
&gt; 即便通过给`apiResult.Status`赋值200，但是`apiResult.Data['parse_info']`和`apiResult.Data['append_info']`的缺失，会导致程序无法往下推进&#13;
&#13;
```c#&#13;
private void DownPlug(object[] objs)&#13;
{&#13;
	ApiResult apiResult = Util.GetApiResult(Constants.API_PlugDownloadUrl + '?plugID=' + this.plug.UID, 3);&#13;
	if (apiResult.Status == 200)&#13;
	{&#13;
		this.plug.LocalFlag = 1;&#13;
		this.plug.ParseInfo = apiResult.Data['parse_info'].ToString();&#13;
		this.plug.AppendInfo = apiResult.Data['append_info'].ToString();&#13;
		DataProcess.UpdateUrlPlug(this.plug);&#13;
		base.Dispatcher.Invoke(delegate&#13;
		{&#13;
			this.IsChanged = true;&#13;
			base.Close();&#13;
		});&#13;
		return;&#13;
	}&#13;
	this.loadingW.ShowMsg(apiResult.Msg, 3);&#13;
}&#13;
```&#13;
&#13;
&gt; 或许只有研究一下，如何刷分享值了&#13;
&#13;
# 相关资源&#13;
&#13;
&gt; [!NOTE] &#13;
&gt; 在线版: v1.2.0.5&#13;
&gt; 离线版: v1.2.0.5&#13;
&#13;
C#反编译工具: https://github.com/dnSpyEx/dnSpy&#13;
[![dnSpyEx/dnSpy - GitHub](https://gh-card.dev/repos/dnSpyEx/dnSpy.svg)](https://github.com/dnSpyEx/dnSpy)&#13;
&#13;
[Read133_Offline.zip](https://github.com/user-attachments/files/16489657/Read133_Offline.zip)&#13;
&#13;
[read133_pro.zip](https://github.com/user-attachments/files/16504182/read133_pro.zip)&#13;
。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/12.html</guid><pubDate>Mon, 05 Aug 2024 05:44:43 +0000</pubDate></item><item><title>未来计划: 复刻 jekyll-theme-chirpy 到 Gmeek</title><link>https://ACG-Q.github.io/new_blog/post/11.html</link><description>[![cotes2020/jekyll-theme-chirpy - GitHub](https://gh-card.dev/repos/cotes2020/jekyll-theme-chirpy.svg)](https://github.com/cotes2020/jekyll-theme-chirpy)&#13;
&#13;
# 实现原理&#13;
&#13;
通过替换https://github.com/Meekdai/Gmeek的Templates文件夹&#13;
&#13;
# 仓库&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 如果完成了这件事，那么下面就会显示出我的仓库卡片，如果没有...&#13;
&#13;
[![ACG-Q/gmeek-theme-chirpy - GitHub](https://gh-card.dev/repos/ACG-Q/gmeek-theme-chirpy.svg)](https://github.com/ACG-Q/gmeek-theme-chirpy)&#13;
。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/11.html</guid><pubDate>Wed, 24 Jul 2024 06:10:31 +0000</pubDate></item><item><title>CORS Anywhere</title><link>https://ACG-Q.github.io/new_blog/post/10.html</link><description>[![Rob--W/cors-anywhere - GitHub](https://gh-card.dev/repos/Rob--W/cors-anywhere.svg)](https://github.com/Rob--W/cors-anywhere)&#13;
&#13;
# CORS Anywhere&#13;
&#13;
CORS Anywhere 是一个 NodeJS 反向代理，它将 CORS 标头添加到代理请求中。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/10.html</guid><pubDate>Wed, 24 Jul 2024 05:22:53 +0000</pubDate></item><item><title>批量提交 Markdown 到Issue</title><link>https://ACG-Q.github.io/new_blog/post/9.html</link><description>&gt; 前情提要: 把Hexo博客的部分文章搬运到Gmeek博客中&#13;
&#13;
### 需求&#13;
&#13;
1. **读取json配置文件**：包含每个issue的标题、Markdown文件路径和标签。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/9.html</guid><pubDate>Wed, 24 Jul 2024 04:12:15 +0000</pubDate></item><item><title>译者++</title><link>https://ACG-Q.github.io/new_blog/post/6.html</link><description># 译者++

## 介绍

一种结合了机器翻译的便利性和手动翻译的工具

Translator++ 目前可以处理**RPG Maker XP、VX、VX Ace、MV 和 Wolf RPG 编辑器引擎**

## 界面

![](https://lh6.googleusercontent.com/FcUkn880LLf-hZJkcoFTStqT1qgmmDHtcD03ruK_do9LFrXtu08QMS9kt2UoodAXgGeUllMshCAos3fxCpcwSIiKBuf-UP-rbvZRerrgbVAs33zg4Piys6tBbyfvTHVpKh3m8dBW)

![](https://lh6.googleusercontent.com/tUMH-x4EPdlUh7xV_IZJ05IlX3k8fXRc6ldAsRwANVCS737nVpc3WUlyYkMN0AKE7ts5aRiNtZtFxu8fWlQ9Fo3ZEbOeBDiyyDgQAkOOv6iP0DjTjG_wyJJcCIs6lE3ykr1XYBMv)

## 下载

#### Translator++ Ver. 6.1.10

下载渠道(付费): [官网](https://dreamsavior.net/translator-the-introduction/)

#### Translator++ Ver. 5.3.31

下载渠道(免费):

1. [官网](https://dreamsavior.net/translator-the-introduction/)
2. [Translator++*5.3.31B_i32*[3b499b5f].7z](https://htfl.net/JDyLRTx)
3. [Translator++*5.3.31B_i32*[3b499b5f].7z](url=https://htfl.net/JDyLRTx)
&lt;!-- ##{'timestamp':1704890457}## --&gt;。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/6.html</guid><pubDate>Wed, 24 Jul 2024 03:53:08 +0000</pubDate></item><item><title>初尝汉化</title><link>https://ACG-Q.github.io/new_blog/post/5.html</link><description>&gt; 结束了!
&gt; PowerToys已经出了官方中文

### 记一次软件汉化的关键过程

&gt; 汉化目标：PowerToys(微软小工具)

#### 第一步：Radialix软件汉化

直接汉化**PowerToys.exe**，**FancyZonesEditor.exe(PowerToys\modules)**，**ImageResizer.exe(PowerToys\modules)**

| 程序名称                       | 新键本地化方案&gt;&gt;目标设置       | 原因                                                     | 汉化对象     |
| ------------------------------ | ------------------------------ | -------------------------------------------------------- | ------------ |
| **PowerToys.exe**        | **创建本地化文件**       |                                                          | 托盘菜单汉化 |
| **FancyZonesEditor.exe** | **创建多语言本地化文件** | 明明本地化(创建本地化文件)成功了的，修改文件名称就失效了 | 程序界面汉化 |
| **ImageResizer.exe**     | **创建本地化文件**       | 其实也可以不汉化，因为软件自带多语言                     | 程序界面汉化 |

#### 第二步：js汉化

直接使用**文本编辑器**进行修改**bundle.js(PowerToys\settings-html\dist)**

通过**查找/替换**进行汉化，不过只能汉化以部分(选项一【**PowerToys General Settings**(常规设置)】**以及**弹窗菜单)，选项一中剩下没汉化的需要其余的汉化成功后，就会被自动替换。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/5.html</guid><pubDate>Wed, 24 Jul 2024 03:53:06 +0000</pubDate></item><item><title>Samsung Galaxy|C5|Lineage OS|Android 8.1</title><link>https://ACG-Q.github.io/new_blog/post/4.html</link><description>&gt; LineageOS14包来自[XDA](https://forum.xda-developers.com/android/development/rom-lineageos-14-1-samsung-galaxy-c5-t3585794)
&gt;
&gt; LineageOS15包来自[XDA](https://forum.xda-developers.com/android/development/rom-lineageos-15-1-samsung-galaxy-c5-t3828557)
&gt;
&gt; LineageOS16包来自[XDA](https://forum.xda-developers.com/android/development/unofficial-rom-lineageos-16-0-samsung-t3935875)

### 搞机必备

1. 下载本人打包好的文件

   [蓝奏云](https://www.lanzoux.com/i9z7y6b)
2. ~~以及C5000ZHU1CRJ5 五件套~~【仅限16和15】
3. 最后也就是ROM包
   [LineageOS 14.1 for Samsung Galaxy C5](https://vasy.ru/CM14/lineage-14.1-20170908-UNOFFICIAL-c5lte.zip)
   [LineageOS 15.1 for Samsung Galaxy C5](https://vasy.ru/LineageOS-15/c5lte/lineage-15.1-20190322-UNOFFICIAL-c5lte.zip)
   [LineageOS 16.0 for Samsung Galaxy C5](https://vasy.ru/LineageOS-16/c5lte/lineage-16.0-20191016-UNOFFICIAL-c5lte.zip)

**准备完成后，进入正题**

### 开始搞机

&gt; 思路如下：解锁→刷TWRP→刷ROM包→完成！！

1. 安装CROM Service APK【三星解锁工具】
   - 路径：samsung_sm_c5000所有文件/CROM Service解锁/CROM Service[三星解锁].apk
   - &lt;img src='https://s1.ax1x.com/2020/04/28/JISzLV.png' alt='CROM解锁' style='zoom: 33%;' /&gt;
2. 解除FRP 锁【也就是查找我的手机】

&lt;!-- more --&gt;

3. 进入Download模式【就是挖煤模式、线刷模式。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/4.html</guid><pubDate>Wed, 24 Jul 2024 03:53:05 +0000</pubDate></item><item><title>斐讯K2路由器的救砖之旅</title><link>https://ACG-Q.github.io/new_blog/post/3.html</link><description>### 前言

之前K2路由不是刷了号称怎么刷都不死的不死鸟Bread，结果在切换固件的时候，貌似刷出问题了，就重刷了几次，再然后就没有然后了，斐讯K2路由器宣告GG。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/3.html</guid><pubDate>Wed, 24 Jul 2024 03:53:04 +0000</pubDate></item><item><title>Ren'Py 专用游戏汉化软件合集</title><link>https://ACG-Q.github.io/new_blog/post/2.html</link><description>&gt; 软件均来自网络&#13;
&#13;
## 前言&#13;
&#13;
​	越来越多的Ren·Py引擎开发的视觉游戏涌入网络，而这一大部分游戏都需要翻译，但是翻译游戏毕竟是由人工翻译完成的，需要时间。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/2.html</guid><pubDate>Wed, 24 Jul 2024 03:53:03 +0000</pubDate></item><item><title>Hexo转Gmeek</title><link>https://ACG-Q.github.io/new_blog/post/1.html</link><description>转移原因:&#13;
1. 方便，巨他妈方便&#13;
2. 简洁的不成样子。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/1.html</guid><pubDate>Wed, 24 Jul 2024 02:39:53 +0000</pubDate></item><item><title>甩锅侠</title><link>https://ACG-Q.github.io/new_blog/post/8.html</link><description>[![jayphelps/git-blame-someone-else - GitHub](https://gh-card.dev/repos/jayphelps/git-blame-someone-else.svg)](https://github.com/jayphelps/git-blame-someone-else)&#13;
&#13;
# git-blame-someone-else&#13;
&#13;
快速甩锅给你(不)认识的人&#13;
&#13;
&lt;!--more--&gt;&#13;
&#13;
## 安装&#13;
&#13;
```shell&#13;
$ git clone https://github.com/jayphelps/git-blame-someone-else.git&#13;
$ cd git-blame-someone-else&#13;
$ sudo make install&#13;
```&#13;
&#13;
## 使用&#13;
&#13;
```shell&#13;
$ git blame-someone-else &lt;背锅侠&gt; &lt;commit&gt;&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/a3c47746-1c23-4cbf-a340-3fb124a5b9f3)&#13;
&#13;
## 危害以及如何防护&#13;
&#13;
[👨‍💻 震惊！竟然有人在 GitHub 上冒充我的身份！](https://spencerwoo.com/blog/wait-this-is-not-my-commit)&#13;
&#13;
&#13;
&lt;!-- ##{'timestamp':1705733895}## --&gt;。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/8.html</guid><pubDate>Sat, 20 Jan 2024 06:58:15 +0000</pubDate></item><item><title>Mega网盘不限速下载</title><link>https://ACG-Q.github.io/new_blog/post/7.html</link><description># MegaDownloader&#13;
&#13;
## 介绍&#13;
&#13;
MegaDownloader 是一个用于从Mega.nz下载文件的免费开源应用程序。</description><guid isPermaLink="true">https://ACG-Q.github.io/new_blog/post/7.html</guid><pubDate>Wed, 10 Jan 2024 13:27:22 +0000</pubDate></item></channel></rss>